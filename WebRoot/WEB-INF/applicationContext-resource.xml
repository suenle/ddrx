<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
    default-autowire="byName" default-lazy-init="false">

    <!-- 属性文件读入,使用rapid中的JdbcPlaceholderConfigurer则可以从数据库读取配置信息 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
            <!-- 
                <value>classpath*:jdbc.properties</value>
            -->
            	<value>/WEB-INF/jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 数据源定义,使用Apache DBCP 连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
        <property name="minIdle" value="${jdbc.minIdle}" />
        <property name="maxIdle" value="${jdbc.maxIdle}" />
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
        <property name="testOnReturn" value="${jdbc.testOnReturn}" />
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
    </bean>

    <!-- 以AspectJ方式 定义 事务 -->
    <aop:config proxy-target-class="true">
        <aop:advisor pointcut="execution(* com.huifu.base.BaseManager.*(..))" advice-ref="txAdvice" order="3"/>
        <aop:advisor pointcut="execution(* com.huifu.service.*.*Service.*(..))" advice-ref="txAdvice" order="4" />
        <aop:aspect ref="managerLoggerAspect" order="2">
            <aop:before pointcut="(target(com.huifu.base.BaseManager))" method="before" />
            <aop:after pointcut="(target(com.huifu.base.BaseManager))" method="after" />
            <aop:after-throwing pointcut="(target(com.huifu.base.BaseManager))" method="afterThrowing" throwing="exception" />
        </aop:aspect>
    </aop:config>

    <!--
        基本事务定义,使用transactionManager作事务管理,默认get* find*方法的事务为readonly,其余方法按默认设置.
        默认的设置请参考Spring文档事务一章.
    -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="load*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="isUnique" read-only="true" />
            <tx:method name="*" read-only="false" />
        </tx:attributes>
    </tx:advice>

    <bean id="managerLoggerAspect" class="com.huifu.base.ManagerLoggerAspect" />

    <!--
        用于持有ApplicationContext,可以使用ApplicationContextHolder.getBean('xxxx')的静态方法得到spring
        bean对象
    -->
    <!--	-->
        <bean class="cn.org.rapid_framework.util.holder.ApplicationContextHolder"/>
    

</beans>